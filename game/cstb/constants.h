static uint16_t const GAME_VERSION_TYPE = 0; // 0-alpha 1-beta 2-rc 3-release
static uint16_t const GAME_VERSION_MAJOR = 2;
static uint16_t const GAME_VERSION_MINOR = 4;
static uint16_t const GAME_VERSION = (GAME_VERSION_TYPE << 10) + (GAME_VERSION_MAJOR << 8) + GAME_VERSION_MINOR;

#define INITIAL_GAME_STATE 1

static uint16_t const GAME_STATE_INGAME = 0;
static uint16_t const GAME_STATE_TITLE = 1;
static uint16_t const GAME_STATE_GAMEOVER = 2;
static uint16_t const GAME_STATE_CREDITS = 3;
static uint16_t const GAME_STATE_CONFIG = 4;
static uint16_t const GAME_STATE_STAGE_SELECTION = 5;
static uint16_t const GAME_STATE_CHARACTER_SELECTION = 6;
static uint16_t const GAME_STATE_MODE_SELECTION = 7;
static uint16_t const GAME_STATE_NETPLAY_LAUNCH = 8;
static uint16_t const GAME_STATE_DONATION = 9;
static uint16_t const GAME_STATE_DONATION_BTC = 10;
static uint16_t const GAME_STATE_DONATION_PAYPAL = 11;
//NOTE maximum supported value is $0f, because get_transition_id returns an ID on one byte. To handle more than 16 states, it should be changed.

static uint16_t const DEFAULT_GRAVITY = 2;

// States used by the game engine, they must have a referenced start_routine
static uint16_t const PLAYER_STATE_THROWN = 0;
static uint16_t const PLAYER_STATE_RESPAWN = 1;
static uint16_t const PLAYER_STATE_INNEXISTANT = 2;
static uint16_t const PLAYER_STATE_SPAWN = 3;
// States used by generic AI to check player's state, no need for a referenced start_routine
static uint16_t const PLAYER_STATE_STANDING = 4;
static uint16_t const PLAYER_STATE_RUNNING = 5;
// End of standard player states, from this index characters are free to define custom states
static uint16_t const CUSTOM_PLAYER_STATES_BEGIN = 6;

static uint16_t const PLAYER_RESPAWN_MAX_DURATION = 250;
static uint16_t const PLAYER_DOWN_TAP_MAX_DURATION = 9;

static uint16_t const CHARACTERS_NUM_TILES_PER_CHAR = 96;
static uint16_t const CHARACTERS_CHARACTER_A_FIRST_TILE = 0;
static uint16_t const CHARACTERS_CHARACTER_B_FIRST_TILE = CHARACTERS_CHARACTER_A_FIRST_TILE+CHARACTERS_NUM_TILES_PER_CHAR;
static uint16_t const CHARACTERS_CHARACTER_A_TILES_OFFSET = CHARACTERS_CHARACTER_A_FIRST_TILE*16;
static uint16_t const CHARACTERS_CHARACTER_B_TILES_OFFSET = CHARACTERS_CHARACTER_B_FIRST_TILE*16;
static uint16_t const CHARACTERS_END_TILES_OFFSET = 2*CHARACTERS_NUM_TILES_PER_CHAR*16;

static uint16_t const CHARACTERS_PROPERTIES_VICTORY_ANIM_OFFSET = 0;
static uint16_t const CHARACTERS_PROPERTIES_DEFEAT_ANIM_OFFSET = 2;
static uint16_t const CHARACTERS_PROPERTIES_MENU_SELECT_ANIM_OFFSET = 4;
static uint16_t const CHARACTERS_PROPERTIES_CHAR_NAME_OFFSET = 6;
static uint16_t const CHARACTERS_PROPERTIES_WEAPON_NAME_OFFSET = 16;
static uint16_t const CHARACTERS_PROPERTIES_ILLUSTRATIONS_ADDR_OFFSET = 26;
static uint16_t const CHARACTERS_PROPERTIES_AI_ACTION_SELECTORS_OFFSET = 28;
static uint16_t const CHARACTERS_PROPERTIES_AI_NB_ATTACKS_OFFSET = 30;
static uint16_t const CHARACTERS_PROPERTIES_AI_ATTACKS_OFFSET = 31;

static uint16_t const TECH_MAX_FRAMES_BEFORE_COLLISION = 15; // To tech successfully the tech must be input at maximum TECH_MAX_FRAMES_BEFORE_COLLISION frames before hitting the ground
static uint16_t const TECH_NB_FORBIDDEN_FRAMES = 60; // After expiration of a tech input, it is not possible to input another tech for TECH_NB_FORBIDDEN_FRAMES frames

static uint16_t const NETWORK_INPUT_LAG = 4;

#define INGAME_PLAYER_A_FIRST_SPRITE 0
#define INGAME_PLAYER_A_LAST_SPRITE 15
#define INGAME_PLAYER_B_FIRST_SPRITE 16
#define INGAME_PLAYER_B_LAST_SPRITE 31

#define DIRECTION_LEFT 0
#define DIRECTION_RIGHT 1

#define HITBOX_DISABLED 0
#define HITBOX_ENABLED 1

#define HITSTUN_PARRY_NB_FRAMES 10
#define SCREENSHAKE_PARRY_NB_FRAMES 2
#define SCREENSHAKE_PARRY_INTENSITY 1

#define MAX_STOCKS 4
#define MAX_AI_LEVEL 3

#define TILENUM_NT_CHAR_0 #TILE_CHAR_0

#define CONTROLLER_BTN_A 128
#define CONTROLLER_BTN_B 64
#define CONTROLLER_BTN_SELECT 32
#define CONTROLLER_BTN_START 16
#define CONTROLLER_BTN_UP 8
#define CONTROLLER_BTN_DOWN 4
#define CONTROLLER_BTN_LEFT 2
#define CONTROLLER_BTN_RIGHT 1

#define CONTROLLER_INPUT_JUMP             CONTROLLER_BTN_UP
#define CONTROLLER_INPUT_JAB              CONTROLLER_BTN_A
#define CONTROLLER_INPUT_LEFT             CONTROLLER_BTN_LEFT
#define CONTROLLER_INPUT_RIGHT            CONTROLLER_BTN_RIGHT
#define CONTROLLER_INPUT_JUMP_RIGHT       CONTROLLER_BTN_UP | CONTROLLER_BTN_RIGHT
#define CONTROLLER_INPUT_JUMP_LEFT        CONTROLLER_BTN_UP | CONTROLLER_BTN_LEFT
#define CONTROLLER_INPUT_ATTACK_LEFT      CONTROLLER_BTN_LEFT | CONTROLLER_BTN_A
#define CONTROLLER_INPUT_ATTACK_RIGHT     CONTROLLER_BTN_RIGHT | CONTROLLER_BTN_A
#define CONTROLLER_INPUT_ATTACK_UP        CONTROLLER_BTN_UP | CONTROLLER_BTN_A
#define CONTROLLER_INPUT_ATTACK_UP_LEFT   CONTROLLER_BTN_UP | CONTROLLER_BTN_A | CONTROLLER_BTN_LEFT
#define CONTROLLER_INPUT_ATTACK_UP_RIGHT  CONTROLLER_BTN_UP | CONTROLLER_BTN_A | CONTROLLER_BTN_RIGHT
#define CONTROLLER_INPUT_SPECIAL          CONTROLLER_BTN_B
#define CONTROLLER_INPUT_SPECIAL_RIGHT    CONTROLLER_BTN_B | CONTROLLER_BTN_RIGHT
#define CONTROLLER_INPUT_SPECIAL_LEFT     CONTROLLER_BTN_B | CONTROLLER_BTN_LEFT
#define CONTROLLER_INPUT_SPECIAL_DOWN     CONTROLLER_BTN_B | CONTROLLER_BTN_DOWN
#define CONTROLLER_INPUT_SPECIAL_UP       CONTROLLER_BTN_B | CONTROLLER_BTN_UP
#define CONTROLLER_INPUT_SPECIAL_UP_LEFT  CONTROLLER_BTN_B | CONTROLLER_BTN_UP | CONTROLLER_BTN_LEFT
#define CONTROLLER_INPUT_SPECIAL_UP_RIGHT CONTROLLER_BTN_B | CONTROLLER_BTN_UP | CONTROLLER_BTN_RIGHT
#define CONTROLLER_INPUT_TECH             CONTROLLER_BTN_DOWN
#define CONTROLLER_INPUT_TECH_RIGHT       CONTROLLER_BTN_DOWN | CONTROLLER_BTN_RIGHT
#define CONTROLLER_INPUT_TECH_LEFT        CONTROLLER_BTN_DOWN | CONTROLLER_BTN_LEFT
#define CONTROLLER_INPUT_DOWN_TILT        CONTROLLER_BTN_DOWN | CONTROLLER_BTN_A

#define GAME_STATE_INGAME 0
#define GAME_STATE_TITLE 1
#define GAME_STATE_GAMEOVER 2
#define GAME_STATE_CREDITS 3
#define GAME_STATE_CONFIG 4
#define GAME_STATE_STAGE_SELECTION 5
#define GAME_STATE_CHARACTER_SELECTION 6

#define ZERO_PAGE_GLOBAL_FIELDS_BEGIN 176

static uint16_t const STAGE_ELEMENT_END = 0;
static uint16_t const STAGE_ELEMENT_PLATFORM = 1;
static uint16_t const STAGE_ELEMENT_SMOOTH_PLATFORM = 2;
static uint16_t const STAGE_ELEMENT_OOS_PLATFORM = 3;
static uint16_t const STAGE_ELEMENT_OOS_SMOOTH_PLATFORM = 4;

#define STAGE_HEADER_OFFSET_PAX_LOW 0
#define STAGE_HEADER_OFFSET_PBX_LOW 1
#define STAGE_HEADER_OFFSET_PAX_HIGH 2
#define STAGE_HEADER_OFFSET_PBX_HIGH 3
#define STAGE_HEADER_OFFSET_PAY_LOW 4
#define STAGE_HEADER_OFFSET_PBY_LOW 5
#define STAGE_HEADER_OFFSET_PAY_HIGH 6
#define STAGE_HEADER_OFFSET_PBY_HIGH 7
#define STAGE_HEADER_OFFSET_RESPAWNX_LOW 8
#define STAGE_HEADER_OFFSET_RESPAWNX_HIGH 9
#define STAGE_HEADER_OFFSET_RESPAWNY_LOW 10
#define STAGE_HEADER_OFFSET_RESPAWNY_HIGH 11
#define STAGE_OFFSET_ELEMENTS 12
#define STAGE_PLATFORM_OFFSET_LEFT 1
#define STAGE_PLATFORM_OFFSET_RIGHT 2
#define STAGE_PLATFORM_OFFSET_TOP 3
#define STAGE_PLATFORM_OFFSET_BOTTOM 4
#define STAGE_OOS_PLATFORM_OFFSET_LEFT_LSB 1
#define STAGE_OOS_PLATFORM_OFFSET_LEFT_MSB 2
#define STAGE_OOS_PLATFORM_OFFSET_RIGHT_LSB 3
#define STAGE_OOS_PLATFORM_OFFSET_RIGHT_MSB 4
#define STAGE_OOS_PLATFORM_OFFSET_TOP_LSB 5
#define STAGE_OOS_PLATFORM_OFFSET_TOP_MSB 6
#define STAGE_OOS_PLATFORM_OFFSET_BOTTOM_LSB 7
#define STAGE_OOS_PLATFORM_OFFSET_BOTTOM_MSB 8
#define STAGE_ELEMENT_SIZE 9

//TODO place these values in character properties
#define NB_CHARACTER_PALETTES 7
#define NB_WEAPON_PALETTES 7

#define AUDIO_CHANNEL_SQUARE 0
#define AUDIO_CHANNEL_TRIANGLE 1

#define PARTICLE_BLOCK_OFFSET_PARAM 0
#define PARTICLE_BLOCK_OFFSET_TILENUM 1
#define PARTICLE_BLOCK_OFFSET_TILEATTR 2
#define PARTICLE_BLOCK_OFFSET_POSITIONS 4
#define PARTICLE_POSITION_OFFSET_X_LSB 0
#define PARTICLE_POSITION_OFFSET_X_MSB 1
#define PARTICLE_POSITION_OFFSET_Y_LSB 2
#define PARTICLE_POSITION_OFFSET_Y_MSB 3
#define PARTICLE_BLOCK_SIZE 32
#define PARTICLE_BLOCK_NB_PARTICLES 7
#define PARTICLE_NB_BLOCKS 2
#define PARTICLE_FIRST_SPRITE 50

#define ANIMATION_STATE_OFFSET_X_LSB 0
#define ANIMATION_STATE_OFFSET_X_MSB 1
#define ANIMATION_STATE_OFFSET_Y_LSB 2
#define ANIMATION_STATE_OFFSET_Y_MSB 3
#define ANIMATION_STATE_OFFSET_DATA_VECTOR_LSB 4
#define ANIMATION_STATE_OFFSET_DATA_VECTOR_MSB 5
#define ANIMATION_STATE_OFFSET_DIRECTION 6
#define ANIMATION_STATE_OFFSET_CLOCK 7
#define ANIMATION_STATE_OFFSET_FIRST_SPRITE_NUM 8
#define ANIMATION_STATE_OFFSET_LAST_SPRITE_NUM 9
#define ANIMATION_STATE_OFFSET_FRAME_VECTOR_LSB 10
#define ANIMATION_STATE_OFFSET_FRAME_VECTOR_MSB 11
#define ANIMATION_STATE_LENGTH 12

#define SLOWDOWN_TIME 100

#define MENU_COMMON_NB_CLOUDS 3
#define MENU_COMMON_OAM_SPRITE_SIZE 4
#define MENU_COMMON_NB_SPRITE_PER_CLOUD 5
#define MENU_COMMON_FIRST_CLOUD_SPRITE (64 - MENU_COMMON_NB_SPRITE_PER_CLOUD * MENU_COMMON_NB_CLOUDS)

//TODO document if it is PAL or NTSC (it should be PAL, but need to verify, and get the NTSC equiv)
#define NOTE_O0_C 2047
#define NOTE_O0_Cs 2047
#define NOTE_O0_D 2047
#define NOTE_O0_Ds 2047
#define NOTE_O0_E 2047
#define NOTE_O0_F 2047
#define NOTE_O0_Fs 2047
#define NOTE_O0_G 2047
#define NOTE_O0_Gs 2001
#define NOTE_O0_A 1888
#define NOTE_O0_As 1782
#define NOTE_O0_B 1682
#define NOTE_O1_C 1588
#define NOTE_O1_Cs 1498
#define NOTE_O1_D 1414
#define NOTE_O1_Ds 1335
#define NOTE_O1_E 1260
#define NOTE_O1_F 1189
#define NOTE_O1_Fs 1122
#define NOTE_O1_G 1059
#define NOTE_O1_Gs 1000
#define NOTE_O1_A 944
#define NOTE_O1_As 891
#define NOTE_O1_B 841
#define NOTE_O2_C 793
#define NOTE_O2_Cs 749
#define NOTE_O2_D 707
#define NOTE_O2_Ds 667
#define NOTE_O2_E 630
#define NOTE_O2_F 594
#define NOTE_O2_Fs 561
#define NOTE_O2_G 529
#define NOTE_O2_Gs 499
#define NOTE_O2_A 471
#define NOTE_O2_As 445
#define NOTE_O2_B 420
#define NOTE_O3_C 396
#define NOTE_O3_Cs 374
#define NOTE_O3_D 353
#define NOTE_O3_Ds 333
#define NOTE_O3_E 314
#define NOTE_O3_F 297
#define NOTE_O3_Fs 280
#define NOTE_O3_G 264
#define NOTE_O3_Gs 249
#define NOTE_O3_A 235
#define NOTE_O3_As 222
#define NOTE_O3_B 209
#define NOTE_O4_C 198
#define NOTE_O4_Cs 186
#define NOTE_O4_D 176
#define NOTE_O4_Ds 166
#define NOTE_O4_E 157
#define NOTE_O4_F 148
#define NOTE_O4_Fs 139
#define NOTE_O4_G 132
#define NOTE_O4_Gs 124
#define NOTE_O4_A 117
#define NOTE_O4_As 110
#define NOTE_O4_B 104
#define NOTE_O5_C 98
#define NOTE_O5_Cs 93
#define NOTE_O5_D 87
#define NOTE_O5_Ds 82
#define NOTE_O5_E 78
#define NOTE_O5_F 73
#define NOTE_O5_Fs 69
#define NOTE_O5_G 65
#define NOTE_O5_Gs 62
#define NOTE_O5_A 58
#define NOTE_O5_As 55
#define NOTE_O5_B 52
#define NOTE_O6_C 49
#define NOTE_O6_Cs 46
#define NOTE_O6_D 43
#define NOTE_O6_Ds 41
#define NOTE_O6_E 38
#define NOTE_O6_F 36
#define NOTE_O6_Fs 34
#define NOTE_O6_G 32
#define NOTE_O6_Gs 30
#define NOTE_O6_A 29
#define NOTE_O6_As 27
#define NOTE_O6_B 25
#define NOTE_O7_C 24
#define NOTE_O7_Cs 22
#define NOTE_O7_D 21
#define NOTE_O7_Ds 20
#define NOTE_O7_E 19
#define NOTE_O7_F 18
#define NOTE_O7_Fs 17
#define NOTE_O7_G 16
#define NOTE_O7_Gs 15
#define NOTE_O7_A 14
#define NOTE_O7_As 13
#define NOTE_O7_B 12
